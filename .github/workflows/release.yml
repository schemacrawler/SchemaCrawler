name: Create Release

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - '*'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-[A-Z]

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: prepare-maven-build
      name: Prepare Maven build
      uses: sualeh/prepare-maven-build@760475f02126626b9077db49728d81849463c9dc # pin@v1.2.1
      with:
        java-version: 8
    - id: install-packages
      name: Install packages
      shell: bash
      run: |
        # Install Graphviz
        sudo apt-get -qq update
        sudo apt-get -q install graphviz
        dot -V

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build and test for distribution
      shell: bash
      run: |
        # Build
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddistrib \
          -Ddocker.skip=false \
          clean install

# PUBLISH WEBSITE TO GITHUB PAGES
    - id: pubish-website
      name: Publish website to GitHub Pages
      uses: peaceiris/actions-gh-pages@068dc23d9710f1ba62e86896f84735d869951305 # pin@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./schemacrawler-website/target/_website
        force_orphan: true
        user_name: 'Sualeh Fatehi'
        user_email: 'sualeh@hotmail.com'
        commit_message: 'SchemaCrawler Website ${{ github.sha }}'

# PUBLISH DOCKER IMAGE
    - id: publish-docker-image
      name: Publish Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      shell: bash
      run: |
        # Publish Docker image
        docker version
        docker image tag schemacrawler/schemacrawler schemacrawler/schemacrawler:v16.16.14
        docker image tag schemacrawler/schemacrawler schemacrawler/schemacrawler:latest
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push --all-tags schemacrawler/schemacrawler
        docker logout

# CREATE GITHUB RELEASE AND ADD ASSETS
    - id: upload-artifacts
      name: Upload installers
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # @v3
      with:
        name: release-artifacts-v16.16.14
        path: |
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-distribution.zip
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-distribution.zip.SHA-512
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-bin.zip
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-bin.zip.SHA-512
        retention-days: 1
    - id: create-release
      name: Create GitHub release
      uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # pin@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          SchemaCrawler ${{ github.event.release.tag_name }} release at last commit ${{ github.sha }}
          See the change history at https://www.schemacrawler.com/changes-report.html
        generate_release_notes: true
        files: |
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-distribution.zip
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-distribution.zip.SHA-512
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-bin.zip
          ./schemacrawler-distrib/target/schemacrawler-16.16.14-bin.zip.SHA-512

# PUBLISH TO CENTRAL REPOSITORY
    - id: install-secret-key
      name: Install secret key
      if: startsWith(github.ref, 'refs/tags/')
      # Note: OSSRH_GPG_SECRET_KEY is exported using gpg --export-secret-keys -a <keyid>
      # and has newlines substituted with a literal \n
      shell: bash
      run: |
        # Install secret key
        cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
    - id: publish-to-central
      name: Publish to Central Repository
      if: startsWith(github.ref, 'refs/tags/')
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      shell: bash
      run: |
        # Publish to Central Repository
        export GPG_TTY=$(tty)
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddistrib \
          -Dmaven.javadoc.skip=false \
          -Dskip.signing.artifacts=false \
          -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
          clean deploy
